# Build this dockerfile with `docker build -f hcc-lc-release-dockerfile -t roc/hcc .`

# To reduce container rebuild time, place commands least likely to change at top to
# most changing at bottom

# This builds the hcc compiler, and depends on an already existing rocr-runtime to be found

# ubuntu:14.04.3, the native kernel is '3.19'
FROM ${rocr_name}
MAINTAINER Kent Knox <kent.knox@amd>

# Default to a login shell
ENTRYPOINT ["/bin/bash"]
CMD ["-l"]

# Install dependencies required to build hcc
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
  build-essential \
  git \
  curl \
  wget \
  python \
  libelf-dev \
  libc++abi-dev \
  libc++-dev && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/*

# App specific environment variables; modify path to add hcc and repo commands
ENV HCC_BUILD_PATH=/usr/local/src/hcc-lc
ENV PATH=${PATH}:${hcc_lc_volume}/bin:~/bin

# Build cmake from scratch to support newer versions of LLVM
RUN wget http://www.cmake.org/files/v3.6/cmake-3.6.0.tar.gz && \
    tar xf cmake-3.6.0.tar.gz && \
    cd cmake-3.6.0 && \
    ./configure && \
    make && \
    make install &&\
    cd .. &&\
    rm -rf cmake-3.6.0.tar.gz cmake-3.6.0

# Compiling hcc-lc requires a custom build tool
RUN mkdir -p ~/bin && \
    curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo && \
    chmod a+x ~/bin/repo

# Build hcc-lc, install to /usr/local
RUN mkdir -p ${HCC_BUILD_PATH} && \
  cd ${HCC_BUILD_PATH} && \
  ~/bin/repo init --depth=1 -u https://github.com/RadeonOpenCompute/HCC-Native-GCN-ISA.git -b ${repo_branch_hcc_lc} && \
  ~/bin/repo sync && \
  cd llvm && \
  mkdir -p build && \
  cd build && \
  cmake \
    -DCMAKE_INSTALL_PREFIX=${hcc_lc_volume} \
    -DCMAKE_BUILD_TYPE=${build_config} \
    -DLLVM_TARGETS_TO_BUILD="AMDGPU;X86" .. && \
  make -j $(nproc) install && \

  cd ../../llvm-amdgpu-assembler-extra/ && \
  mkdir -p build && \
  cd build && \
  cmake \
    -DCMAKE_INSTALL_PREFIX=${hcc_lc_volume} \
    -DCMAKE_BUILD_TYPE=${build_config} \
    -DBUILD_EXAMPLES=OFF \
    -DHSA_ROOT=${rocr_volume} \
    -DLLVM_DIR="${HCC_BUILD_PATH}/llvm/build" .. && \
  make -j $(nproc) install && \

  cd ../../hcc && \
  mkdir -p build && \
  cd build && \
  ln -sr ${rocr_volume}/include ${rocr_volume}/include/hsa && \
  cmake \
    -DCMAKE_INSTALL_PREFIX=${hcc_lc_volume} \
    -DCMAKE_BUILD_TYPE=${build_config} \
    -DROCM_ROOT=${rocr_volume} \
    -DHSA_LLVM_BIN_DIR=${hcc_lc_volume}/bin \
    -DHSA_AMDGPU_GPU_TARGET=fiji \
    -DAMDPHDRS_DIR=${hcc_lc_volume}/bin \
    -DHSA_USE_AMDGPU_BACKEND=ON .. && \
  make -j $(nproc) world && \
  make install && \
  git log -n 3 > ${hcc_lc_volume}/git-stamp.log && \
  ${hcc_lc_cleanup} \
  echo "${hcc_lc_volume}/lib" >> /etc/ld.so.conf.d/hcc-lc.conf && \
  ldconfig
