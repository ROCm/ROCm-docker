# This dockerfile is meant to be personalized, and serves as a template and demonstration.
# Modify it directly, but it is recommended to copy this dockerfile into a new build context (directory),
# modify to taste and modify docker-compose.yml.template to build and run it.

# It is recommended to control docker containers through 'docker-compose' https://docs.docker.com/compose/
# Docker compose depends on a .yml file to control container sets
# rocm-setup.sh can generate a useful docker-compose .yml file
# `docker-compose run --rm <rocm-terminal>`

# If it is desired to run the container manually through the docker command-line, the following is an example
# 'docker run -it --rm -v [host/directory]:[container/directory]:ro <user-name>/<project-name>'.

ARG ROCM_VERSION=6.2
ARG TERM_FLAVOR

FROM rocm/dev-ubuntu-24.04:${ROCM_VERSION}${TERM_FLAVOR}

ARG UID
ARG RENDER_GID
ARG USER_NAME=rocm-user

# Initialize the image
# Modify to pre-install dev tools and ROCm packages
RUN apt-get update \
  && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
  git \
  vim-nox \
  less \
  python3-venv

# Modify to pre-install X11 related tools and user space drivers
# These packages are installed after render group has been added
# because a depending package would add render group with specific GID
RUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
  mesa-vulkan-drivers \
  vulkan-tools \
  libgulkan-utils \
  libgl1-amdgpu-mesa-dri \
  vainfo \
  xserver-xorg-amdgpu-video-amdgpu \
  x11-apps \
  dbus-x11 \
  mesa-utils \
  pulseaudio \
  fuse
RUN apt-get clean \
  && rm -rf /var/lib/apt/lists/*

# Grant members of 'sudo' group passwordless privileges
# Comment out to require sudo
COPY sudo-nopasswd /etc/sudoers.d/sudo-nopasswd

# This is meant to be used as an interactive developer container
# Create user $USER_NAME or rename existing "ubuntu" user
RUN if [ -n "$RENDER_GID" ]; then \
        CUR_RENDER_GID=$(getent group render | cut --delimiter ':' --fields 3); \
        if [ $RENDER_GID -ne $CUR_RENDER_GID ]; then \
            groupmod -g $RENDER_GID render; \
        fi; \
    fi; \
    if [ -n "$UID" ]; then \
        if [ "$UID" -eq 1000 ]; then \
            usermod -l $USER_NAME ubuntu; \
            usermod -md /home/$USER_NAME $USER_NAME; \
            usermod -aG render $USER_NAME; \
        else \
            useradd --create-home -u $UID -G sudo,video,render --shell /bin/bash $USER_NAME; \
        fi; \
    else \
        useradd --create-home -G sudo,video,render --shell /bin/bash $USER_NAME; \
    fi

# Make startup script to launch dbus for user session
COPY start-dbus.sh /usr/local/bin
RUN chmod +x /usr/local/bin/start-dbus.sh

# Append /opt/rocm/bin to the system PATH variable
USER $USER_NAME
WORKDIR /home/$USER_NAME
ENV PATH "${PATH}:/opt/rocm/bin"

# The following are optional enhancements for the command-line experience
# Uncomment the following to install a pre-configured vim environment based on http://vim.spf13.com/
# 1.  Sets up an enhanced command line dev environment within VIM
# 2.  Aliases GDB to enable TUI mode by default
#RUN curl -sL https://j.mp/spf13-vim3 | bash && \
#    echo "alias gdb='gdb --tui'\n" >> ~/.bashrc

# Default to a login shell
CMD ["/bin/sh", "/usr/local/bin/start-dbus.sh" ]
